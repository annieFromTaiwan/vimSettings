
"""""""""""""""""""""""""""""""""""""""""""
""" (*) Theme files needed when using gvim:
"""         ~/.vim/colors/...
"""         ~/.vim/ftplugin/python.vim
""" (*) When seeking help you can type:
"""         :help wildmenu
"""         :h feature-list
"""         :h =~
"""""""""""""""""""""""""""""""""""""""""""

execute pathogen#infect()


" map this substitution in command line mode
cmap dp %s/ \+$//g



if has("gui_running")               " GUI is running or is about to start.
    set lines=25 columns=120
    set guifont=Consolas:h14
    "set guifont=Cantarell:h14
    color pyte                      " ~/.vim/colors/pyte.vim
else                                " This is console Vim.
    if has("unix")
        let s:uname = system("uname -s")
        if s:uname =~ "Darwin"      " when using mac
            color zellner
        endif
    else
        "set font=Arial
        color morning
        "set background=dark        " the other one is 'light'
    endif
endif



""" syntax coloring according to the extension(.c/.cpp/.py/...)
syntax on
""" show line numbers in the side
set number
"set nonu
""" highlight things that you search
set hlsearch
"set nohlsearch
""" when typing vim commands, press tab then a bar of options will jump above
set wildmenu



""" to activate file type plugin (for indention, etc)
filetype plugin indent on



""" when opening file, make the cursor stays at previous editing position
autocmd BufReadPost *
              \ if line("'\"")>0&&line("'\"")<=line("$") |
              \ exe "normal g'\"" |
              \ endif



""" indentation related tabs and spaces
""" :retab     => æ‰€æœ‰tabè®Šç©ºæ ¼
""" ctrl+v+tab => æŒ‰çœŸçš„tab
set ai et ci pi sw=4 tabstop=4 sts=4
":set autoindent     " if not set, the cursor'll start at the beginning when inserting a new line
":set expandtab      " hitting a tab in insert mode will produce the appropriate number of spaces
":set copyindent     " auto `set paste` when pasting??
":set preserveindent
":set shiftwidth=4   " indent with 4 spaces when using `<<` and `>>` commands
":set tabstop=4      " set a tab to be four columns wide
":set softtabstop=0  " dont care; relevant only when `set noexpandtab`






""" make `d` to be truly `delete`, instead of `cut
""" then when you `d` and `p`, the things you deleted won't be pasted
""" use `x` when you really want `delete`
"nnoremap d "_d
"vnoremap d "_d



""" no compatible with the old 'vi',
""" should be the first in .vimrc, because it affects lots of settings
"""
""" if .vimrc is found, then default setting is nocompatible,
""" but this line still is useful sometimes
set nocompatible



""" where the swap file [XXXX.swp] are saved
set directory=~/tmp,/var/tmp/vi.recover,/tmp,.
""" keep a backup file
set backup              " set nobackup
""" where the backup file [XXXX~] are saved
""" you can create a dir [./.backup]
set backupdir=~/tmp,/var/tmp/vi.recover,/tmp,./.backup,.



""" when a line of text is too long, displaying in multiple lines
set wrap                " set nowrap
""" which keys can make move to the next line
set whichwrap=b,s,<,>,[,]



set mouse=v


set bs=2        " allow backspacing over everything in insert mode



"set textwidth=78
"set viminfo='20,\"50   " read/write a .viminfo file, don't store more



set encoding=utf-8
"set encoding=big5



if version >= 600              " vim 6.0
    "set foldcolumn=2
    set foldmethod=marker
    "set foldmethod=syntax
    set foldlevel=1
    "set foldtext=/^/=>

    "set termencoding=big5

    "set fileencoding=big5
    set fileencodings=latin,big5,ucs-bom,utf-8,sjis,big5
    "set fileencodings=ucs-bom,utf-8,sjis,big5,latin1
else
    set fileencoding=taiwan
endif



if version >= 700
    map <F4> :set invcursorline<CR>

    map  [D :tabprev<CR>
    map  [C :tabnext<CR>
    map  <C-c> :tabnew<CR>
    imap <C-c> <ESC>:tabnew<CR>
    map  <C-t> :tabnew<CR>
    imap <C-t> <ESC>:tabnew<CR>
    map  <C-k> :tabclose<CR>

    "<C-w> is for switching between windows
    "map  <C-w> :tabclose<CR>

    "<C-p> <C-n> needed when using ubuntu terminal tab
    "map  <C-p> :tabprev<CR>
    "imap <C-p> <ESC>:tabprev<CR>
    "map  <C-n> :tabnext<CR>
    "imap <C-n> <ESC>:tabnext<CR>
    map  <C-Left> :tabprev<CR>
    imap <C-Left> <ESC>:tabprev<CR>
    map  <C-Right> :tabnext<CR>
    imap <C-Right> <ESC>:tabnext<CR>

    set tabpagemax=1000

    map g1 :tabn 1<CR>
    map g2 :tabn 2<CR>
    map g3 :tabn 3<CR>
    map g4 :tabn 4<CR>
    map g5 :tabn 5<CR>
    map g6 :tabn 6<CR>
    map g7 :tabn 7<CR>
    map g8 :tabn 8<CR>
    map g9 :tabn 9<CR>
    map g0 :tabn 10<CR>
    map gc :tabnew<CR>
    map gn :tabn<CR>
    map gp :tabp<CR>

    map  <Home> ^
    imap <Home> <Esc>I
    " Or the <End> often jumps to the newline character, disturbing
    map  <End> $
    map  <F2> *
    imap <F2> <Esc>*i
    map  <F3> #
    imap <F3> <Esc>#i
    map  ff 0d$

    "map  , <Down>
    "map  j <Left>

    highlight TabLineSel term=bold,underline cterm=bold,underline ctermfg=7 ctermbg=0
    highlight TabLine    term=bold cterm=bold ctermfg=white ctermbg=black
    highlight clear TabLineFill
end

""" Crontabs must be edited in place
"au BufRead /tmp/crontab* :set backupcopy=no




""" when inserting brackets, the cursor will shortly move to the previous matching bracket
""" (Press any key then the cursor will go back. It's just an animation)
"set showmatch
""" set the duration of the animation to tenths of a second
":set matchtime=10


""""""""""""""""" no use """"""""""""""""""""

" If no screen, use color term
"if ($TERM == "vt100")
  " xterm-color / screen
  "set t_Co=8
  "set t_AF=[1;3%p1%dm
  "set t_AB=[4%p1%dm
"endif


"if filereadable($VIMRUNTIME . "/vimrc_example.vim")
" so $VIMRUNTIME/vimrc_example.vim
"endif
"
"if filereadable($VIMRUNTIME . "/macros/matchit.vim")
" so $VIMRUNTIME/macros/matchit.vim
"endif


